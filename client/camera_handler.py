

import cv2
import numpy as np
from shared.config import CAMERA_INDEX, CAMERA_WIDTH, CAMERA_HEIGHT, CAMERA_FPS

class CameraHandler:
    """
    üé¨ Clase principal para manejar tu c√°mara web
    
    Esta clase es como un "driver" que habla con tu c√°mara y nos da
    los frames de video que necesitamos para el seguimiento de objetos.
    """
    
    def __init__(self, camera_index: int = None):
        """
        üîß Configura la c√°mara antes de usarla
        
        Args:
            camera_index: ¬øQu√© c√°mara usar? (0=primera, 1=segunda, etc.)
                         Si no especificas, usa la del archivo config.py
        """
        # Usar la c√°mara especificada o la de configuraci√≥n por defecto
        self.camera_index = camera_index if camera_index is not None else CAMERA_INDEX
        self.width = CAMERA_WIDTH      # Ancho del video
        self.height = CAMERA_HEIGHT    # Alto del video  
        self.fps = CAMERA_FPS          # Frames por segundo
        self.cap = None                # Aqu√≠ guardaremos la conexi√≥n a la c√°mara
        
    def initialize(self) -> bool:
        """
        üöÄ Enciende la c√°mara y la prepara para usarla
        
        Returns:
            True si todo sali√≥ bien, False si hubo problemas
        """
        try:
            # Intentar conectarse a la c√°mara
            print(f"üîç Intentando conectar con c√°mara {self.camera_index}...")
            self.cap = cv2.VideoCapture(self.camera_index)
            
            # ¬øSe pudo abrir la c√°mara?
            if not self.cap.isOpened():
                print(f"‚ùå No se pudo abrir la c√°mara {self.camera_index}")
                print("üí° Prueba cambiar CAMERA_INDEX en shared/config.py")
                return False
            
            # Configurar la calidad y tama√±o del video
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, self.width)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, self.height)
            self.cap.set(cv2.CAP_PROP_FPS, self.fps)
            
            print(f"‚úÖ ¬°C√°mara lista! Resoluci√≥n: {self.width}x{self.height}")
            return True
            
        except Exception as e:
            print(f"üí• Error inesperado al inicializar la c√°mara: {e}")
            return False
    
    def get_frame(self) -> tuple:
        """
        Captura un frame de la c√°mara.
        
        Returns:
            Tupla (success, frame)
        """
        if self.cap is None:
            return False, None
        
        ret, frame = self.cap.read()
        return ret, frame
    
    def release(self):
        """Libera la c√°mara."""
        if self.cap is not None:
            self.cap.release()
            self.cap = None
            print("C√°mara liberada")
    
    def is_opened(self) -> bool:
        """Verifica si la c√°mara est√° abierta."""
        return self.cap is not None and self.cap.isOpened()


def find_available_cameras(max_cameras=10):
    """
    Busca c√°maras disponibles en el sistema.
    
    Args:
        max_cameras: N√∫mero m√°ximo de c√°maras a probar
        
    Returns:
        Lista de √≠ndices de c√°maras disponibles
    """
    available_cameras = []
    
    print("Buscando c√°maras disponibles...")
    
    for i in range(max_cameras):
        cap = cv2.VideoCapture(i)
        if cap.isOpened():
            ret, _ = cap.read()
            if ret:
                available_cameras.append(i)
                print(f"‚úì C√°mara encontrada en √≠ndice {i}")
            cap.release()
        else:
            # Probar diferentes backends
            for backend in [cv2.CAP_V4L2, cv2.CAP_GSTREAMER, cv2.CAP_FFMPEG]:
                cap = cv2.VideoCapture(i, backend)
                if cap.isOpened():
                    ret, _ = cap.read()
                    if ret:
                        available_cameras.append(i)
                        print(f"‚úì C√°mara encontrada en √≠ndice {i} (backend alternativo)")
                        cap.release()
                        break
                cap.release()
    
    if not available_cameras:
        print("‚úó No se encontraron c√°maras disponibles")
    
    return available_cameras

def test_camera():
    """Funci√≥n simple para probar la c√°mara."""
    # Buscar c√°maras disponibles
    available_cameras = find_available_cameras()
    
    if not available_cameras:
        print("‚ùå No hay c√°maras disponibles en el sistema")
        print("üí° Verifica que:")
        print("  - Tu c√°mara est√© conectada")
        print("  - No est√© siendo usada por otra aplicaci√≥n")
        print("  - Tengas permisos para acceder a la c√°mara")
        return False
    
    # Usar la primera c√°mara disponible
    camera_index = available_cameras[0]
    print(f"üé• Usando c√°mara {camera_index}")
    
    # Intentar diferentes backends para mejor compatibilidad
    backends = [
        (cv2.CAP_DSHOW, "DirectShow (Windows)"),
        (cv2.CAP_MSMF, "Media Foundation (Windows)"),
        (cv2.CAP_ANY, "Auto-detectar")
    ]
    
    cap = None
    backend_usado = None
    
    for backend, nombre in backends:
        print(f"üîß Probando backend: {nombre}")
        cap = cv2.VideoCapture(camera_index, backend)
        
        if cap.isOpened():
            # Probar capturar un frame para verificar que funciona
            ret, test_frame = cap.read()
            if ret and test_frame is not None:
                print(f"‚úÖ Backend {nombre} funcionando correctamente")
                backend_usado = nombre
                break
            else:
                print(f"‚ö†Ô∏è Backend {nombre} se abri√≥ pero no captura frames")
                cap.release()
                cap = None
        else:
            print(f"‚ùå Backend {nombre} no pudo abrir la c√°mara")
            cap.release()
            cap = None
    
    if cap is None or not cap.isOpened():
        print("‚ùå No se pudo inicializar la c√°mara con ning√∫n backend")
        return False

    # Configurar la c√°mara
    print(f"‚öôÔ∏è Configurando c√°mara...")
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    cap.set(cv2.CAP_PROP_FPS, 30)
    
    # Verificar configuraci√≥n actual
    actual_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    actual_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    actual_fps = cap.get(cv2.CAP_PROP_FPS)
    
    print(f"üìä Configuraci√≥n actual: {actual_width}x{actual_height} @ {actual_fps:.1f}fps")
    print(f"üîß Backend usado: {backend_usado}")
    print("üìπ Presiona 'q' en la ventana para salir")
    print()

    try:
        frame_count = 0
        frames_vacios = 0
        
        while True:
            ret, frame = cap.read()

            if not ret:
                print("‚ö†Ô∏è No se pudo leer frame (ret=False)")
                frames_vacios += 1
                if frames_vacios > 10:
                    print("‚ùå Demasiados frames fallidos, cerrando...")
                    break
                continue
                
            if frame is None:
                print("‚ö†Ô∏è Frame es None")
                frames_vacios += 1
                if frames_vacios > 10:
                    print("‚ùå Demasiados frames None, cerrando...")
                    break
                continue

            # Reset contador de frames vac√≠os
            frames_vacios = 0
            frame_count += 1

            # Debug cada 30 frames
            if frame_count % 30 == 0:
                print(f"üì∏ Frame {frame_count}: {frame.shape}, min={frame.min()}, max={frame.max()}")

            # Agregar informaci√≥n en el frame
            cv2.putText(frame, f"Frame: {frame_count}", (10, 30), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, f"Backend: {backend_usado}", (10, 70), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame, "Presiona 'q' para salir", (10, 110), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

            # Mostrar imagen
            cv2.imshow('Camera Test - Seguimiento de Objetos', frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                print("üëã Saliendo por petici√≥n del usuario")
                break
                
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interrupci√≥n del usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la captura: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        if cap is not None:
            cap.release()
        cv2.destroyAllWindows()
        print("üßπ Recursos liberados")
    
    return True
